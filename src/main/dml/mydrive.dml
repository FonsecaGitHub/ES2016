package pt.tecnico.mydrive.domain;

/* CLASSES */

class MyDrive{
	int numberOfUsers;
	int numberOfFiles;
} 

class User {
	String username;
	String name;
	String password;
	String homedir;
	String mask;
}

class Session {
	LocalTime lastTimeInSession;
	String token;
}

class SuperUser extends User;

class Permission {
	boolean read;
	boolean write;
	boolean exec;
	boolean remove;
}

class File {
	int id;
	String path;
	String name;
	DateTime datamod;
}

class PlainFile extends File;

class Directory extends File {
	String dirName;
	String children;
	String parent;
}

class Link extends PlainFile;

class Application extends PlainFile{
	String method;
}

/* RELATIONS */

relation DomainRootHasMyDrive {
  .pt.ist.fenixframework.DomainRoot playsRole root {
    multiplicity 0..1;
  }
  MyDrive playsRole mydrive {
    multiplicity 0..1;
  }
}


relation MyDriveContainsUsers{
	MyDrive playsRole mydrive {
   		multiplicity 0..1;
	}
	User playsRole user {
		multiplicity *;
	}
}

relation MyDriveContaisFiles{
	MyDrive playsRole mydrivefiles {
		multiplicity 0..1;
	}
	File playsRole filesfrommydrive{
		multiplicity *;
	}
}

relation UserContainsFiles{
	User playsRole user;
	File playsRole file {
		multiplicity *;
	}
}

relation UserHasSession {
  User playsRole userInSession {
    multiplicity 1..1;
  }
  Session playsRole session {
    multiplicity 0..1;
  }
}

relation UserHasPermissions{
	User playsRole user {
    	multiplicity 1..1;
	}
	Permission playsRole permission {
		multiplicity *;
	}
}

/*
relation FileContainsPermissions{
	Permission playsRole filepermissions {
		multiplicity *;
	}
	File playsRole permitedfile  {
   		multiplicity 0..1;
	}	
}*/

relation PermissionHasFile {
	Permission playsRole permission {
		multiplicity 1..*;
	}
	File playsRole file {
		multiplicity 1..1;
	}
}

relation DirectoryContaisFiles{
	Directory playsRole dir {
	    multiplicity 0..1;
	}
	File playsRole owned {
		multiplicity *;
	}
}

relation MyDriveContainsDirectory{
	MyDrive playsRole md {
		multiplicity 0..1;
	}

	Directory playsRole directory {
		multiplicity *;
	}
}

relation MyDriveContainsPlainFile{
	MyDrive playsRole md {
		multiplicity 0..1;
	}

	PlainFile playsRole plainfile {
		multiplicity *;
	}
}
